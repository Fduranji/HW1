1.1.1
   a. 7
   b. 200.0000002
   c. true
   
1.1.2
   a. double 1.618
   b. 10.0
   c. boolean true
   d. String 33
   
1.1.3
   Program is ArgsCompare.java

1.1.4
   a. then is not a keyword in java
   b. There needs to be parenthesis around a > b
   c. Nothing is incorrect
   d. There is a semicolon missinga after the c = 0

1.1.5
      if( x > 0 && x < 1 && y > 0 && y < 1)
         System.out.println("true");
      else
         System.out.println("false");
1.1.6
   It prints:
   0
   1
   1
   2
   3
   5
   8
   13
   21
   34
   55
   89
   144
   233
   377
   610
   
1.1.7
   a. 9.00000
   b. 499500
   c. 10000

1.1.8
   a. b - just prints out the character b
   b. 197 - adding the unicode values of char b and char c
   c. e - prints because e is 4 "letters" away from a 
   
1.1.12
   0
   1
   2
   3
   4
   4
   3
   2
   1
   0

1.2.6
   Program is CircularShift.java
   
1.2.12
public static String dayOfTheWeek(int y, int m, int d)
{
    String name = "";
    String[] week = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
    Calendar cal = Calendar.getInstance();
    cal.set(y,(m - 1),d);
    
    int day = cal.get(cal.DAY_OF_WEEK);
    name = week[day - 1];
    return name;
}   

1.3.3
   None of the sequences could occur, it is my understanding that a stack works
   by first in last out. So if that is the case, 9 should always be the first number
   that gets popped, with every following number being the next to pop. Ultimately 0
   being the last to be popped out of the stack. 

1.3.9
   Program is ParenthesisFix.java
   
1.4.1
   
   
1.4.5
   a. ~N
   b. ~1
   c. ~2
   d. ~2N^3
   e. ~N
   d. ~2N
   
1.4.6
   a. Growth = 2N
   b. Growth = N
   c. Growth = 

1.4.9
   O(2^N)     